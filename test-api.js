const http = require('http');

function testAPI() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/employees...');
    
    const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/api/employees',
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    const req = http.request(options, (res) => {
        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
        
        let data = '';
        res.on('data', (chunk) => {
            data += chunk;
        });
        
        res.on('end', () => {
            try {
                if (res.statusCode === 200) {
                    const employees = JSON.parse(data);
                    console.log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
                    console.log('üë• –ü–µ—Ä–≤—ã–µ 3 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:');
                    employees.slice(0, 3).forEach((emp, index) => {
                        console.log(`${index + 1}. ${emp.name} - ${emp.position}`);
                    });
                } else {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ API. –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
                    console.log('–û—Ç–≤–µ—Ç:', data);
                }
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞:', error.message);
                console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
            }
        });
    });

    req.on('error', (error) => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error.message);
        console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: cd src/server && npm start');
    });

    req.setTimeout(5000, () => {
        console.log('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API');
        req.destroy();
    });

    req.end();
}

// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
setTimeout(testAPI, 2000); 