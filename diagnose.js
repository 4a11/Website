#!/usr/bin/env node

const net = require('net');
const os = require('os');
const { exec } = require('child_process');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
console.log('=====================================');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
function checkPort(host, port) {
    return new Promise((resolve) => {
        const socket = new net.Socket();
        
        socket.setTimeout(3000);
        
        socket.on('connect', () => {
            console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –Ω–∞ ${host} –¥–æ—Å—Ç—É–ø–µ–Ω`);
            socket.destroy();
            resolve(true);
        });
        
        socket.on('timeout', () => {
            console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ ${host}:${port}`);
            socket.destroy();
            resolve(false);
        });
        
        socket.on('error', (err) => {
            console.log(`‚ùå –ü–æ—Ä—Ç ${port} –Ω–∞ ${host} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err.message}`);
            resolve(false);
        });
        
        socket.connect(port, host);
    });
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
    return new Promise((resolve) => {
        console.log(`\nüìã ${description}...`);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                resolve(false);
                return;
            }
            if (stderr && !stderr.includes('Warning')) {
                console.warn(`‚ö†Ô∏è ${stderr}`);
            }
            if (stdout) {
                console.log(stdout.trim());
            }
            resolve(true);
        });
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
async function diagnose() {
    console.log('\nüñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:');
    console.log(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${os.platform()}`);
    console.log(`–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${os.arch()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞
    console.log('\nüåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:');
    const interfaces = os.networkInterfaces();
    let externalIPs = [];
    
    Object.keys(interfaces).forEach(interfaceName => {
        interfaces[interfaceName].forEach(interface => {
            if (interface.family === 'IPv4' && !interface.internal) {
                console.log(`${interfaceName}: ${interface.address}`);
                externalIPs.push(interface.address);
            }
        });
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã
    console.log('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤:');
    await checkPort('localhost', 3000);
    await checkPort('127.0.0.1', 3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ IP
    console.log('\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö IP:');
    for (const ip of externalIPs) {
        await checkPort(ip, 3000);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π IP
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ IP (212.220.204.230):');
    await checkPort('212.220.204.230', 3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 3000
    console.log('\nüëÄ –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 3000:');
    if (os.platform() === 'win32') {
        await runCommand('netstat -ano | findstr :3000', '–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Windows');
    } else {
        await runCommand('lsof -i :3000', '–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Linux/Mac');
        await runCommand('netstat -tlnp | grep :3000', '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Linux');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞
    console.log('\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞:');
    if (os.platform() === 'win32') {
        await runCommand('netsh advfirewall show allprofiles state', '–°—Ç–∞—Ç—É—Å Windows Firewall');
    } else {
        await runCommand('sudo ufw status', '–°—Ç–∞—Ç—É—Å UFW (Ubuntu)');
    }
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run server');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç 3000 –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ');
    console.log('3. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ä–æ—É—Ç–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ IP-–∞–¥—Ä–µ—Å 212.220.204.230 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnose().catch(console.error); 