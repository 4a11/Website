const { Pool } = require('pg');
const bcrypt = require('bcrypt');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const pool = new Pool({
    user: 'postgres',          
    password: 'NiceDbPassword',  
    host: 'localhost',         
    port: 5432,                
    database: 'postgres',      
    ssl: false                 
});

async function testAdminPassword() {
    try {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è "password123" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è admin
        const result = await pool.query('SELECT id, username, password_hash FROM users WHERE username = $1', ['admin']);
        
        if (result.rows.length === 0) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        const user = result.rows[0];
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.username} (ID: ${user.id})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å password123
        const testPassword = 'password123';
        const isValid = await bcrypt.compare(testPassword, user.password_hash);
        
        if (isValid) {
            console.log('üéâ –£–°–ü–ï–•! –ü–∞—Ä–æ–ª—å "password123" –ü–†–ê–í–ò–õ–¨–ù–´–ô!');
            console.log('');
            console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
            console.log('   –õ–æ–≥–∏–Ω: admin');
            console.log('   –ü–∞—Ä–æ–ª—å: password123');
            console.log('   URL: http://novadom.duckdns.org:3000');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
            
            const axios = require('axios').default;
            
            try {
                const loginResponse = await axios.post('http://localhost:3000/api/auth/login', {
                    username: 'admin',
                    password: 'password123'
                });
                
                console.log('‚úÖ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
                console.log(`   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${loginResponse.data.token ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`   –†–æ–ª—å: ${loginResponse.data.role}`);
                
            } catch (apiError) {
                console.log('‚ùå –û—à–∏–±–∫–∞ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', apiError.response?.data?.message || apiError.message);
            }
            
        } else {
            console.log('‚ùå –ü–∞—Ä–æ–ª—å "password123" –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô!');
            console.log('');
            console.log('üîß –•–æ—Ç–∏—Ç–µ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å "password123"?');
            console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node set-admin-password.js');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è:', error.message);
    } finally {
        await pool.end();
    }
}

testAdminPassword(); 