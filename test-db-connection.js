const { Pool } = require('pg');

const pool = new Pool({
    user: 'postgres',
    password: 'NiceDbPassword',
    host: 'localhost',
    port: 5432,
    database: 'postgres',
    ssl: false
});

async function testConnection() {
    try {
        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã employee
        const tableCheck = await client.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'employee'
            )
        `);
        
        if (!tableCheck.rows[0].exists) {
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã employee...');
            await client.query(`
                CREATE TABLE employee (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    position VARCHAR(100) NOT NULL,
                    email VARCHAR(255) UNIQUE NOT NULL,
                    phone VARCHAR(20),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            `);
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ employee —Å–æ–∑–¥–∞–Ω–∞!');
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ employee —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const countResult = await client.query('SELECT COUNT(*) FROM employee');
        const count = parseInt(countResult.rows[0].count);
        console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –ë–î: ${count}`);
        
        if (count === 0) {
            console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            await client.query(`
                INSERT INTO employee (name, position, email, phone, created_at) VALUES
                ('–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', '–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä', 'ivanov@company.ru', '+7 (900) 123-45-67', NOW()),
                ('–ü–µ—Ç—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞', '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞', 'petrova@company.ru', '+7 (900) 234-56-78', NOW()),
                ('–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', 'sidorov@company.ru', '+7 (900) 345-67-89', NOW()),
                ('–ö–æ–∑–ª–æ–≤–∞ –ê–Ω–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', 'kozlova@company.ru', '+7 (900) 456-78-90', NOW()),
                ('–ù–æ–≤–∏–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'novikov@company.ru', '+7 (900) 567-89-01', NOW()),
                ('–ú–æ—Ä–æ–∑–æ–≤–∞ –û–ª—å–≥–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞', 'HR-–º–µ–Ω–µ–¥–∂–µ—Ä', 'morozova@company.ru', '+7 (900) 678-90-12', NOW()),
                ('–í–æ–ª–∫–æ–≤ –°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á', '–í–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'volkov@company.ru', '+7 (900) 789-01-23', NOW()),
                ('–õ–µ–±–µ–¥–µ–≤–∞ –ú–∞—Ä–∏—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞', '–î–∏–∑–∞–π–Ω–µ—Ä', 'lebedeva@company.ru', '+7 (900) 890-12-34', NOW()),
                ('–°–æ–∫–æ–ª–æ–≤ –ê–Ω–¥—Ä–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á', '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', 'sokolov@company.ru', '+7 (900) 901-23-45', NOW()),
                ('–§–µ–¥–æ—Ä–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≥–æ—Ä–µ–≤–Ω–∞', '–ê–Ω–∞–ª–∏—Ç–∏–∫', 'fedorova@company.ru', '+7 (900) 012-34-56', NOW())
            `);
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        const employees = await client.query('SELECT * FROM employee ORDER BY id LIMIT 5');
        console.log('üë• –ü–µ—Ä–≤—ã–µ 5 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        employees.rows.forEach((emp, index) => {
            console.log(`${index + 1}. ${emp.name} - ${emp.position} (${emp.email})`);
        });
        
        client.release();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint
        console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint...');
        try {
            const fetch = require('node-fetch');
            const response = await fetch('http://localhost:3000/api/employees');
            if (response.ok) {
                const apiEmployees = await response.json();
                console.log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${apiEmployees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
            } else {
                console.log(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}`);
            }
        } catch (apiError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:', apiError.message);
            console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: cd src/server && npm start');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

testConnection(); 