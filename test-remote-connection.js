const axios = require('axios').default;

async function testRemoteConnection() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...\n');
    
    const endpoints = [
        'http://novadom.duckdns.org:3000',
        'http://novadom.duckdns.org:3000/api/auth/login',
        'http://212.220.204.230:3000',
        'http://212.220.204.230:3000/api/auth/login'
    ];
    
    for (const endpoint of endpoints) {
        try {
            console.log(`üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${endpoint}`);
            
            if (endpoint.includes('/api/auth/login')) {
                // –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                const response = await axios.post(endpoint, {
                    username: 'admin',
                    password: 'password123'
                }, {
                    timeout: 10000,
                    headers: {
                        'Content-Type': 'application/json',
                        'User-Agent': 'TestScript/1.0'
                    }
                });
                
                console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
                console.log(`   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${response.data.token ? '–î–∞' : '–ù–µ—Ç'}`);
                console.log(`   –†–æ–ª—å: ${response.data.role || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
                
            } else {
                // –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                const response = await axios.get(endpoint, {
                    timeout: 10000,
                    headers: {
                        'User-Agent': 'TestScript/1.0'
                    }
                });
                
                console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status}`);
                console.log(`   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${response.data.length || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –±–∞–π—Ç`);
            }
            
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            if (error.response) {
                console.log(`   HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
                console.log(`   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`);
            }
            if (error.code) {
                console.log(`   –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
            }
        }
        
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    }
    
    // –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
    console.log('üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
        const localResponse = await axios.post('http://localhost:3000/api/auth/login', {
            username: 'admin', 
            password: 'password123'
        }, {
            timeout: 5000
        });
        
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log(`   –°—Ç–∞—Ç—É—Å: ${localResponse.status}`);
        console.log(`   –¢–æ–∫–µ–Ω: ${localResponse.data.token ? '–ü–æ–ª—É—á–µ–Ω' : '–ù–µ –ø–æ–ª—É—á–µ–Ω'}`);
        
    } catch (localError) {
        console.log('‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
        console.log(`   –û—à–∏–±–∫–∞: ${localError.message}`);
    }
}

testRemoteConnection().catch(console.error); 