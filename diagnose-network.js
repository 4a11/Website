#!/usr/bin/env node

const os = require('os');
const http = require('http');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π');
console.log('=============================================');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
function getAllIPs() {
    const interfaces = os.networkInterfaces();
    const ips = [];
    
    for (const interfaceName in interfaces) {
        const interfaceData = interfaces[interfaceName];
        for (const connection of interfaceData) {
            if (connection.family === 'IPv4' && !connection.internal) {
                ips.push({
                    interface: interfaceName,
                    ip: connection.address
                });
            }
        }
    }
    
    return ips;
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
function testServerConnection(ip, port = 3000) {
    return new Promise((resolve) => {
        const req = http.get(`http://${ip}:${port}/api/employees`, { timeout: 5000 }, (res) => {
            resolve({
                success: true,
                status: res.statusCode,
                ip: ip,
                port: port
            });
        });
        
        req.on('error', (error) => {
            resolve({
                success: false,
                error: error.message,
                ip: ip,
                port: port
            });
        });
        
        req.on('timeout', () => {
            req.destroy();
            resolve({
                success: false,
                error: 'Timeout',
                ip: ip,
                port: port
            });
        });
    });
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function testAuth(ip, port = 3000) {
    return new Promise((resolve) => {
        const postData = JSON.stringify({
            username: 'admin',
            password: 'password123'
        });
        
        const options = {
            hostname: ip,
            port: port,
            path: '/api/auth/login',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            },
            timeout: 5000
        };
        
        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const parsed = JSON.parse(data);
                    resolve({
                        success: res.statusCode === 200,
                        status: res.statusCode,
                        data: parsed,
                        ip: ip,
                        port: port
                    });
                } catch (e) {
                    resolve({
                        success: false,
                        error: 'Invalid JSON response',
                        status: res.statusCode,
                        data: data,
                        ip: ip,
                        port: port
                    });
                }
            });
        });
        
        req.on('error', (error) => {
            resolve({
                success: false,
                error: error.message,
                ip: ip,
                port: port
            });
        });
        
        req.on('timeout', () => {
            req.destroy();
            resolve({
                success: false,
                error: 'Timeout',
                ip: ip,
                port: port
            });
        });
        
        req.write(postData);
        req.end();
    });
}

async function main() {
    console.log('1. üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:');
    console.log('===================================');
    
    const ips = getAllIPs();
    if (ips.length === 0) {
        console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    ips.forEach(({ interface: iface, ip }) => {
        console.log(`${iface}: ${ip}`);
    });
    
    console.log('\n2. üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:');
    console.log('=========================================');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º localhost
    console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ localhost:3000...');
    const localhostTest = await testServerConnection('localhost');
    if (localhostTest.success) {
        console.log(`‚úÖ localhost:3000 - –°—Ç–∞—Ç—É—Å: ${localhostTest.status}`);
    } else {
        console.log(`‚ùå localhost:3000 - –û—à–∏–±–∫–∞: ${localhostTest.error}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ IP
    for (const { interface: iface, ip } of ips) {
        console.log(`\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${ip}:3000 (${iface})...`);
        const result = await testServerConnection(ip);
        if (result.success) {
            console.log(`‚úÖ ${ip}:3000 - –°—Ç–∞—Ç—É—Å: ${result.status}`);
        } else {
            console.log(`‚ùå ${ip}:3000 - –û—à–∏–±–∫–∞: ${result.error}`);
        }
    }
    
    console.log('\n3. üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log('==============================');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ localhost
    console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ localhost:3000...');
    const localhostAuth = await testAuth('localhost');
    if (localhostAuth.success) {
        console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ localhost:3000 - –£—Å–ø–µ—à–Ω–æ`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${localhostAuth.data.username}`);
        console.log(`   –†–æ–ª—å: ${localhostAuth.data.role}`);
    } else {
        console.log(`‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ localhost:3000 - –û—à–∏–±–∫–∞: ${localhostAuth.error || localhostAuth.data?.message}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –≤—Å–µ—Ö IP
    for (const { interface: iface, ip } of ips) {
        console.log(`\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ ${ip}:3000 (${iface})...`);
        const result = await testAuth(ip);
        if (result.success) {
            console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ ${ip}:3000 - –£—Å–ø–µ—à–Ω–æ`);
            console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.data.username}`);
            console.log(`   –†–æ–ª—å: ${result.data.role}`);
        } else {
            console.log(`‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ ${ip}:3000 - –û—à–∏–±–∫–∞: ${result.error || result.data?.message}`);
        }
    }
    
    console.log('\n4. üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('==================');
    
    if (localhostTest.success) {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ');
        
        const workingIPs = ips.filter(async ({ ip }) => {
            const test = await testServerConnection(ip);
            return test.success;
        });
        
        if (ips.length > 0) {
            console.log('üåê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:');
            ips.forEach(({ interface: iface, ip }) => {
                console.log(`   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP: ${ip} (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ${iface})`);
                console.log(`   - URL –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: http://${ip}:4200`);
                console.log(`   - URL –¥–ª—è API: http://${ip}:3000/api`);
            });
            
            console.log('\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
            console.log('1. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ Angular —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --host 0.0.0.0:');
            console.log('   ng serve --host 0.0.0.0 --port 4200');
            
            console.log('\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å host: "0.0.0.0"');
            console.log('   (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ server.js - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: app.listen(port, "0.0.0.0"))');
            
            console.log('\n3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç—ã –≤ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–µ Windows:');
            console.log('   netsh advfirewall firewall add rule name="NodeJS App" dir=in action=allow protocol=TCP localport=3000');
            console.log('   netsh advfirewall firewall add rule name="Angular Dev Server" dir=in action=allow protocol=TCP localport=4200');
            
            console.log('\n4. –û–±–Ω–æ–≤–∏—Ç–µ environment.ts:');
            console.log(`   apiUrl: 'http://${ips[0].ip}:3000/api'`);
        }
    } else {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: node server.js');
    }
}

main().catch(console.error); 