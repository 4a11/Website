#!/usr/bin/env node

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
console.log('===================================');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
    return new Promise((resolve, reject) => {
        console.log(`\nüìã ${description}...`);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                reject(error);
                return;
            }
            if (stderr) {
                console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${stderr}`);
            }
            console.log(`‚úÖ ${description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            if (stdout) console.log(stdout);
            resolve(stdout);
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ .env
function checkEnvFile() {
    const envPath = path.join(__dirname, '.env');
    if (!fs.existsSync(envPath)) {
        console.log('\n‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:');
        console.log(`
NODE_ENV=production
HOST=0.0.0.0
PORT=3000
JWT_SECRET=your-very-long-and-secure-secret-key-for-production

DB_HOST=localhost
DB_PORT=5432
DB_NAME=postgres
DB_USER=postgres
DB_PASSWORD=NiceDbPassword
        `);
        return false;
    }
    return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
async function deploy() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
        if (!checkEnvFile()) {
            process.exit(1);
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        await runCommand('npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await runCommand('node test-db-connection.js', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

        // –°–±–æ—Ä–∫–∞ Angular –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await runCommand('npm run build', '–°–±–æ—Ä–∫–∞ Angular –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');

        console.log('\nüéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
        console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        console.log('3. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à IP-–∞–¥—Ä–µ—Å');
        
        // –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å
        const os = require('os');
        const interfaces = os.networkInterfaces();
        console.log('\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞:');
        Object.keys(interfaces).forEach(interfaceName => {
            interfaces[interfaceName].forEach(interface => {
                if (interface.family === 'IPv4' && !interface.internal) {
                    console.log(`   - http://${interface.address}:3000`);
                }
            });
        });

    } catch (error) {
        console.error('\n‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
deploy(); 