const { Pool } = require('pg');
const bcrypt = require('bcrypt');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const pool = new Pool({
    user: 'postgres',          
    password: 'NiceDbPassword',  
    host: 'localhost',         
    port: 5432,                
    database: 'postgres',      
    ssl: false                 
});

async function checkUsers() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ users...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        const tableCheck = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'users'
            );
        `);
        
        if (!tableCheck.rows[0].exists) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            console.log('üîß –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É users...');
            
            await pool.query(`
                CREATE TABLE users (
                    id SERIAL PRIMARY KEY,
                    username VARCHAR(50) UNIQUE NOT NULL,
                    email VARCHAR(100) UNIQUE NOT NULL,
                    password_hash VARCHAR(255) NOT NULL,
                    role VARCHAR(20) DEFAULT 'user',
                    token TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            `);
            
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const result = await pool.query('SELECT id, username, email, role, created_at FROM users ORDER BY id');
        
        console.log(`\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${result.rows.length}`);
        
        if (result.rows.length === 0) {
            console.log('‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
            console.log('üîß –°–æ–∑–¥–∞—é –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            const adminPassword = 'admin123'; // –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const hashedPassword = await bcrypt.hash(adminPassword, 10);
            
            await pool.query(`
                INSERT INTO users (username, email, password_hash, role) 
                VALUES ('admin', 'admin@novadom.com', $1, 'admin')
            `, [hashedPassword]);
            
            console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
            console.log('   –õ–æ–≥–∏–Ω: admin');
            console.log('   –ü–∞—Ä–æ–ª—å: admin123');
            console.log('   Email: admin@novadom.com');
            
        } else {
            console.log('\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
            result.rows.forEach((user, index) => {
                console.log(`${index + 1}. ${user.username} (${user.email}) - –†–æ–ª—å: ${user.role}`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin
            const adminUser = result.rows.find(user => user.username === 'admin');
            if (adminUser) {
                console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–∞–π–¥–µ–Ω!');
                console.log(`   ID: ${adminUser.id}`);
                console.log(`   Email: ${adminUser.email}`);
                console.log(`   –†–æ–ª—å: ${adminUser.role}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π...');
                const passwordCheck = await pool.query('SELECT password_hash FROM users WHERE username = $1', ['admin']);
                const storedHash = passwordCheck.rows[0].password_hash;
                
                const testPasswords = ['admin', 'admin123', '123456', 'password', 'NiceDbPassword'];
                
                for (const testPassword of testPasswords) {
                    const isValid = await bcrypt.compare(testPassword, storedHash);
                    const status = isValid ? '‚úÖ' : '‚ùå';
                    console.log(`   ${status} "${testPassword}"`);
                }
                
            } else {
                console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –ù–ï –Ω–∞–π–¥–µ–Ω!');
                console.log('üîß –°–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin...');
                
                const adminPassword = 'admin123';
                const hashedPassword = await bcrypt.hash(adminPassword, 10);
                
                await pool.query(`
                    INSERT INTO users (username, email, password_hash, role) 
                    VALUES ('admin', 'admin@novadom.com', $1, 'admin')
                `, [hashedPassword]);
                
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω —Å –ø–∞—Ä–æ–ª–µ–º: admin123');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

checkUsers(); 